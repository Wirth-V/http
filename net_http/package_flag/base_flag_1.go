// Базовая конструкция для создания фалга
/*
Теория:

Пакет flag в языке программирования Golang предоставляет простой и удобный способ обработки аргументов командной строки. Он позволяет определять флаги (или опции) для приложения и извлекать значения этих флагов из командной строки. Флаги могут быть различных типов, таких как строки, числа, булевы значения и т. д.

Основные функции flag включают:

    flag.String(name string, value string, usage string) *string: Создает строковый флаг.
    flag.Int(name string, value int, usage string) *int: Создает флаг целого числа.
    flag.Bool(name string, value bool, usage string) *bool: Создает булев флаг.
    flag.Parse(): Парсит аргументы командной строки и устанавливает значения флагов.
*/

package main

import (
	"flag"
	"fmt"
)

func main() {
	//определение флагов
	var name = flag.String("name", "Ivan", "Name of user")
	var age = flag.Int("age", 25, "Age of user")
	var isAdmin = flag.Bool("admin", false, "Access rights")
	// Все эти 3 функции возвращают адрессссылки ()
	//То бишь они возвращают тип "указатель"
	/*
			    "name" (первый аргумент):
		        Это имя флага. Когда вы запускаете программу с аргументами командной
				строки, вы можете указать значение для этого флага, используя синтаксис
				 -name=значение.

		    "Ivan" (второй аргумент):
		        Это значение по умолчанию. Если пользователь не указывает значение для
				флага при запуске программы, будет использовано значение по умолчанию.
				В данном случае, если флаг -name не указан, name будет равно "Ivan".

		    "Name of user" (третий аргумент):
		        Это описание флага. Описание предоставляет пользовательскую документацию
				 по использованию флага. Когда вы генерируете автоматическую
				 документацию или выводите справку, это описание помогает пользователю
				 понять, что делает этот флаг.
	*/

	//Парсинг аргументов командой сроки
	flag.Parse()
	//Именно это команда считывает из командой строки рагументы
	//Если забыть ее указать, то считывания не произойдет
	//и будут выведены аргументы со значениме по умолчанию

	fmt.Println("Name:", *name)
	fmt.Println("Age:", *age)
	fmt.Println("Admin:", *isAdmin)
}
